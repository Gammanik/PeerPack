import React, { useState, useEffect } from 'react';
import apiService from '../services/api';

const WalletTab = ({ userBalance }) => {
    const [transactions, setTransactions] = useState([]);
    const [transactionsLoading, setTransactionsLoading] = useState(true);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
    useEffect(() => {
        const loadTransactions = async () => {
            try {
                setTransactionsLoading(true);
                // const response = await apiService.getUserTransactions();
                // setTransactions(response.transactions || []);
                
                // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
                await new Promise(resolve => setTimeout(resolve, 500));
                setTransactions(mockTransactions);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
            } finally {
                setTransactionsLoading(false);
            }
        };
        
        loadTransactions();
    }, []);
    const styles = {
        container: {
            width: '100%'
        },
        balanceCard: {
            background: 'var(--tg-theme-secondary-bg-color, #232e3c)',
            border: '0.5px solid var(--tg-theme-hint-color, #708499)',
            borderRadius: 12,
            padding: 20,
            marginBottom: 20,
            textAlign: 'center'
        },
        totalBalance: {
            fontSize: 32,
            fontWeight: 700,
            color: 'var(--tg-theme-button-color, #5288c1)',
            marginBottom: 8
        },
        balanceLabel: {
            fontSize: 14,
            color: 'var(--tg-theme-hint-color, #708499)',
            marginBottom: 20
        },
        balanceBreakdown: {
            display: 'flex',
            justifyContent: 'space-between',
            gap: 12
        },
        balanceItem: {
            flex: 1,
            textAlign: 'center',
            padding: '12px 8px',
            background: 'var(--tg-theme-bg-color, #17212b)',
            borderRadius: 8,
            border: '0.5px solid var(--tg-theme-hint-color, #708499)'
        },
        balanceAmount: {
            fontSize: 16,
            fontWeight: 600,
            marginBottom: 4
        },
        availableAmount: {
            color: '#4BB34B'
        },
        frozenAmount: {
            color: '#FF8C00'
        },
        pendingAmount: {
            color: '#FFD700'
        },
        balanceItemLabel: {
            fontSize: 12,
            color: 'var(--tg-theme-hint-color, #708499)',
            fontWeight: 500
        },
        infoCard: {
            background: 'rgba(100, 181, 239, 0.1)',
            border: '0.5px solid rgba(100, 181, 239, 0.3)',
            borderRadius: 12,
            padding: 16,
            marginBottom: 20
        },
        infoTitle: {
            fontSize: 16,
            fontWeight: 600,
            color: 'var(--tg-theme-accent-text-color, #64b5ef)',
            marginBottom: 12,
            display: 'flex',
            alignItems: 'center',
            gap: 8
        },
        infoText: {
            fontSize: 13,
            color: 'var(--tg-theme-text-color, #ffffff)',
            lineHeight: 1.4,
            marginBottom: 8
        },
        withdrawButton: {
            background: 'var(--tg-theme-button-color, #5288c1)',
            color: 'var(--tg-theme-button-text-color, #ffffff)',
            border: 'none',
            borderRadius: 8,
            padding: '12px 16px',
            fontSize: 16,
            fontWeight: 600,
            cursor: 'pointer',
            width: '100%',
            marginTop: 8,
            disabled: userBalance.available === 0
        },
        transactionHistory: {
            marginTop: 20
        },
        transactionItem: {
            background: 'var(--tg-theme-secondary-bg-color, #232e3c)',
            border: '0.5px solid var(--tg-theme-hint-color, #708499)',
            borderRadius: 8,
            padding: 12,
            marginBottom: 8,
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center'
        },
        transactionInfo: {
            flex: 1
        },
        transactionDesc: {
            fontSize: 14,
            color: 'var(--tg-theme-text-color, #ffffff)',
            fontWeight: 500,
            marginBottom: 2
        },
        transactionDate: {
            fontSize: 12,
            color: 'var(--tg-theme-hint-color, #708499)'
        },
        transactionAmount: {
            fontSize: 16,
            fontWeight: 600,
            color: '#4BB34B'
        }
    };

    const mockTransactions = [
        {
            id: 1,
            description: '–î–æ—Å—Ç–∞–≤–∫–∞: –î–æ–∫—É–º–µ–Ω—Ç—ã',
            date: '10 –∞–≤–≥, 14:30',
            amount: 800,
            type: 'income'
        },
        {
            id: 2,
            description: '–î–æ—Å—Ç–∞–≤–∫–∞: –õ–µ–∫–∞—Ä—Å—Ç–≤–∞',
            date: '9 –∞–≤–≥, 16:45',
            amount: 1000,
            type: 'income'
        },
        {
            id: 3,
            description: '–î–æ—Å—Ç–∞–≤–∫–∞: –ü–æ–¥–∞—Ä–æ–∫',
            date: '8 –∞–≤–≥, 12:20',
            amount: 600,
            type: 'income'
        }
    ];

    return (
        <div style={styles.container}>
            <div style={styles.balanceCard}>
                <div style={styles.totalBalance}>
                    ‚ÇΩ{(userBalance.available + userBalance.frozen + userBalance.pending).toLocaleString()}
                </div>
                <div style={styles.balanceLabel}>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å</div>
                
                <div style={styles.balanceBreakdown}>
                    <div style={styles.balanceItem}>
                        <div style={{
                            ...styles.balanceAmount,
                            ...styles.availableAmount
                        }}>
                            ‚ÇΩ{userBalance.available.toLocaleString()}
                        </div>
                        <div style={styles.balanceItemLabel}>–î–æ—Å—Ç—É–ø–Ω–æ</div>
                    </div>
                    
                    <div style={styles.balanceItem}>
                        <div style={{
                            ...styles.balanceAmount,
                            ...styles.frozenAmount
                        }}>
                            ‚ÇΩ{userBalance.frozen.toLocaleString()}
                        </div>
                        <div style={styles.balanceItemLabel}>–í –∑–∞–º–æ—Ä–æ–∑–∫–µ</div>
                    </div>
                    
                    <div style={styles.balanceItem}>
                        <div style={{
                            ...styles.balanceAmount,
                            ...styles.pendingAmount
                        }}>
                            ‚ÇΩ{userBalance.pending.toLocaleString()}
                        </div>
                        <div style={styles.balanceItemLabel}>–û–∂–∏–¥–∞—é—Ç</div>
                    </div>
                </div>
            </div>

            <div style={styles.infoCard}>
                <div style={styles.infoTitle}>
                    üí∞ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–ª–∞—Ç–µ–∂–∏
                </div>
                <div style={styles.infoText}>
                    ‚Ä¢ <strong>–î–æ—Å—Ç—É–ø–Ω–æ:</strong> –¥–µ–Ω—å–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏
                </div>
                <div style={styles.infoText}>
                    ‚Ä¢ <strong>–í –∑–∞–º–æ—Ä–æ–∑–∫–µ:</strong> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
                </div>
                <div style={styles.infoText}>
                    ‚Ä¢ <strong>–û–∂–∏–¥–∞—é—Ç:</strong> –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                </div>
            </div>

            <button 
                style={{
                    ...styles.withdrawButton,
                    opacity: userBalance.available === 0 ? 0.5 : 1
                }}
                disabled={userBalance.available === 0}
                onClick={async () => {
                    if (userBalance.available > 0) {
                        try {
                            await apiService.withdrawBalance(userBalance.available);
                            alert(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚ÇΩ${userBalance.available} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞:', error);
                            alert('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤');
                        }
                    }
                }}
            >
                üí≥ –í—ã–≤–µ—Å—Ç–∏ ‚ÇΩ{userBalance.available.toLocaleString()}
            </button>

            <div style={styles.transactionHistory}>
                <h3 style={{
                    fontSize: 16,
                    fontWeight: 600,
                    color: 'var(--tg-theme-text-color, #ffffff)',
                    marginBottom: 12
                }}>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</h3>
                
                {transactionsLoading ? (
                    <div style={{
                        textAlign: 'center',
                        color: 'var(--tg-theme-hint-color, #708499)',
                        padding: 20
                    }}>
                        –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...
                    </div>
                ) : transactions.map(transaction => (
                    <div key={transaction.id} style={styles.transactionItem}>
                        <div style={styles.transactionInfo}>
                            <div style={styles.transactionDesc}>{transaction.description}</div>
                            <div style={styles.transactionDate}>{transaction.date}</div>
                        </div>
                        <div style={styles.transactionAmount}>
                            +‚ÇΩ{transaction.amount}
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default WalletTab;